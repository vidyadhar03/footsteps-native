# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  # Enable stricter type checking
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  rules:
    # Code style and readability
    prefer_single_quotes: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_literals_to_create_immutables: true
    prefer_final_locals: true
    prefer_final_in_for_each: true
    prefer_final_fields: true
    avoid_print: true
    
    # Security and error prevention
    avoid_web_libraries_in_flutter: true
    avoid_returning_null_for_future: true
    avoid_slow_async_io: true
    cancel_subscriptions: true
    close_sinks: true
    
    # Performance
    avoid_function_literals_in_foreach_calls: true
    prefer_spread_collections: true
    prefer_for_elements_to_map_fromIterable: true
    
    # Documentation
    public_member_api_docs: false  # Can be enabled later for library packages
    
    # Null safety
    avoid_null_checks_in_equality_operators: true
    avoid_returning_null_for_void: true

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
